[{"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\MorphingButton.tsx":"1","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ActivitiesDashboard.tsx":"2","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\containers\\ActivitiesMaster.tsx":"3","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ActivitiesList.tsx":"4","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\AppBar.tsx":"5","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ActivityEntry.tsx":"6","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\MorphingModal.tsx":"7","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ModalEditBody.tsx":"8","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ModalDetailsBody.tsx":"9","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ModalCreateBody.tsx":"10","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\App.tsx":"11","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\index.tsx":"12"},{"size":1086,"mtime":1606875059301,"results":"13","hashOfConfig":"14"},{"size":2738,"mtime":1606874246444,"results":"15","hashOfConfig":"14"},{"size":3150,"mtime":1606872658204,"results":"16","hashOfConfig":"14"},{"size":1164,"mtime":1606873285915,"results":"17","hashOfConfig":"14"},{"size":770,"mtime":1606872363429,"results":"18","hashOfConfig":"14"},{"size":1136,"mtime":1606873720020,"results":"19","hashOfConfig":"14"},{"size":1040,"mtime":1606871888933,"results":"20","hashOfConfig":"14"},{"size":1048,"mtime":1606874422158,"results":"21","hashOfConfig":"14"},{"size":934,"mtime":1606869461600,"results":"22","hashOfConfig":"14"},{"size":942,"mtime":1606872583405,"results":"23","hashOfConfig":"14"},{"size":231,"mtime":1606863789220,"results":"24","hashOfConfig":"14"},{"size":149,"mtime":1606865284214,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dexbh7",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\MorphingButton.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ActivitiesDashboard.tsx",["51"],"//React Imports\r\nimport React, { useState, useEffect } from 'react';\r\n//Components\r\nimport AppBar from './AppBar';\r\nimport ActivitiesList from './ActivitiesList';\r\nimport MorphingModal from './MorphingModal';\r\n//TS types\r\nimport { Activity } from '../types';\r\n\r\n\r\n\r\ntype Props = {\r\n    activities: Activity[],\r\n    resetActivities: () => void,\r\n    createActivity: (e: any) => void,\r\n    editActivity: (e: any) => void,\r\n    eraseActivity: (e: any) => void,\r\n    toggleActivityCheckmark: (e: any) => void\r\n};\r\n\r\ntype ModalState = {\r\n    isOpen: boolean,\r\n    kind: \"none\" | \"create\" | \"edit\" | \"details\",\r\n    contains: null | Activity\r\n};\r\n\r\nconst ActivitiesDashboard: React.FC<Props> = ( {activities, resetActivities, createActivity, editActivity, eraseActivity, toggleActivityCheckmark} ) => {\r\n    const [modal, setModal] = useState<ModalState>( {isOpen: false, kind: 'none', contains: null} );\r\n\r\n    useEffect(() => {\r\n        if(modal.isOpen) closeModal();\r\n    }, [activities]);\r\n\r\n    const openModal = (e: any, kind: string) => {\r\n        switch(kind) {\r\n            case 'create': \r\n            {\r\n                setModal( {isOpen: true, kind, contains: null} );\r\n                break;\r\n            } \r\n            case 'edit': \r\n            {\r\n                const thisActivityID = Number(e.currentTarget.closest('li').getAttribute('data-id'));\r\n                const activity = activities.find( ( {id} ) => id === thisActivityID );\r\n                if(activity) setModal( {isOpen: true, kind, contains: activity} );\r\n                break;\r\n            } \r\n            case 'details': \r\n            {\r\n                const thisActivityID = Number(e.currentTarget.getAttribute('data-id'));\r\n                const activity = activities.find( ( {id} ) => id === thisActivityID );\r\n                if(activity) setModal( {isOpen: true, kind, contains: activity} );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setModal( {isOpen: false, kind: 'none', contains: null} );\r\n    }\r\n\r\n    const disableResetButton = activities.filter(( {checked} ) => checked === true ).length > 0 ? false : true;\r\n\r\n    return (\r\n        <div>\r\n            <AppBar disableResetButton={disableResetButton} resetActivities={resetActivities} openModal={openModal}/>\r\n            <ActivitiesList activities={activities} openModal={openModal} editActivity={editActivity} eraseActivity={eraseActivity} toggleActivityCheckmark={toggleActivityCheckmark}/>\r\n            <MorphingModal isOpen={modal.isOpen} kind={modal.kind} contains={modal.contains} closeModal={closeModal} createActivity={createActivity} editActivity={editActivity}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActivitiesDashboard;","C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\containers\\ActivitiesMaster.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ActivitiesList.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\AppBar.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ActivityEntry.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\MorphingModal.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ModalEditBody.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ModalDetailsBody.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\components\\ModalCreateBody.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\App.tsx",[],"C:\\coding\\progetti-ed-altro\\hooks-material-ts-todolist\\src\\index.tsx",[],{"ruleId":"52","severity":1,"message":"53","line":32,"column":8,"nodeType":"54","endLine":32,"endColumn":20,"suggestions":"55"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'modal.isOpen'. Either include it or remove the dependency array.","ArrayExpression",["56"],{"desc":"57","fix":"58"},"Update the dependencies array to be: [activities, modal.isOpen]",{"range":"59","text":"60"},[972,984],"[activities, modal.isOpen]"]